#!/usr/bin/env python3

import math

import rclpy
from rclpy.node import Node

from geometry_msgs.msg import Quaternion


class PanTiltCam(Node):
    '''
    Control node for nodebot1's camera.

    '''
    def __init__(self):
        super().__init__('pan_tilt_cam')
        # subscription for cmd_vel in namespace of nodebot1
        self.subscription = self.create_subscription(
            Quaternion,
            '/local/cmd_cam',
            self.cmd_cam_listener_callback,
            10)

        self.subscription  # prevent unused variable warning


    def cmd_cam_listener_callback(self, msg):
        self.get_logger().debug('/local/cmd_cam: "%s"' % msg)
        # roll (x-axis rotation)
        sinr_cosp = 2 * (msg.w * msg.x + msg.y * msg.z)
        cosr_cosp = 1 - 2 * (msg.x * msg.x + msg.y * msg.y)
        roll = math.atan2(sinr_cosp, cosr_cosp)
        # pitch (y-axis rotation)
        sinp = 2 * (msg.w * msg.y - msg.z * msg.x)
        if abs(sinp) >= 1:
            # use 90 degrees aka pi/2 if out of range
            if sinp > 0:
                pitch = math.pi/2
            else:
                pitch = -math.pi/2
        else:
            pitch = math.asin(sinp)
        # yaw (z-axis rotation)
        siny_cosp = 2 * (msg.w * msg.z + msg.x * msg.y)
        cosy_cosp = 1 - 2 * (msg.y * msg.y + msg.z * msg.z)
        yaw = math.atan2(siny_cosp, cosy_cosp)
        print(roll, pitch, yaw)


def main(args=None):
    rclpy.init(args=args)

    pan_tilt_cam = PanTiltCam()

    rclpy.spin(pan_tilt_cam)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    pan_tilt_cam.destroy_node()
    rclpy.shutdown()



if __name__ == '__main__':
    main()
